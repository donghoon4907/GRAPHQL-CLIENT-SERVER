type User {
  id: ID! @id
  nickname: String! @unique
  email: String! @unique
  isMaster: Boolean! @default(value: false)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  avatar: Avatar! @relation(link: INLINE)
  posts: [Post!]! @relation(name: "PostOfUser", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikeOfUser", onDelete: CASCADE)
  comments: [Comment!]! @relation(name: "CommentOfUser", onDelete: CASCADE)
  postCount: Int! @default(value: 0)
}

type Post {
  id: ID! @id
  title: String! 
  description: String!
  content: String!
  user: User! @relation(name: "PostOfUser")
  likeCount: Int! @default(value: 0)
  likes: [Like!]! @relation(name: "LikeOfPost", onDelete: CASCADE)
  histories: [History!]! @relation(name: "HistoryOfPost", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  viewCount: Int! @default(value: 0)
  category: String!
  comments: [Comment!]! @relation(name: "CommentOfPost", onDelete: CASCADE)
  commentCount: Int! @default(value: 0)
}

type Notice {
  id: ID! @id 
  title: String!
  description: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Like {
  id: ID! @id
  user: User! @relation(name: "LikeOfUser")
  post: Post! @relation(name: "LikeOfPost")
}

type Category {
  id: ID! @id
  content: String! @unique
  useCount: Int! @default(value: 0)
}

type Comment {
  id: ID! @id
  post: Post! @relation(name: "CommentOfPost")
  user: User! @relation(name: "CommentOfUser")
  content: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type History {
  id: ID! @id 
  post: Post! @relation(name: "HistoryOfPost")
  ip: String!
  createdAt: DateTime! @createdAt
}

type Avatar {
  id: ID! @id
  url: String!
}





